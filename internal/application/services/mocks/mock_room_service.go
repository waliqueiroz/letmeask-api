// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/waliqueiroz/letmeask-api/internal/application/services (interfaces: RoomService)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dtos "github.com/waliqueiroz/letmeask-api/internal/application/dtos"
	entities "github.com/waliqueiroz/letmeask-api/internal/domain/entities"
)

// MockRoomService is a mock of RoomService interface.
type MockRoomService struct {
	ctrl     *gomock.Controller
	recorder *MockRoomServiceMockRecorder
}

// MockRoomServiceMockRecorder is the mock recorder for MockRoomService.
type MockRoomServiceMockRecorder struct {
	mock *MockRoomService
}

// NewMockRoomService creates a new mock instance.
func NewMockRoomService(ctrl *gomock.Controller) *MockRoomService {
	mock := &MockRoomService{ctrl: ctrl}
	mock.recorder = &MockRoomServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoomService) EXPECT() *MockRoomServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRoomService) Create(arg0 entities.Room) (entities.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(entities.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRoomServiceMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRoomService)(nil).Create), arg0)
}

// CreateQuestion mocks base method.
func (m *MockRoomService) CreateQuestion(arg0 string, arg1 entities.Question) (entities.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQuestion", arg0, arg1)
	ret0, _ := ret[0].(entities.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQuestion indicates an expected call of CreateQuestion.
func (mr *MockRoomServiceMockRecorder) CreateQuestion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuestion", reflect.TypeOf((*MockRoomService)(nil).CreateQuestion), arg0, arg1)
}

// DeleteQuestion mocks base method.
func (m *MockRoomService) DeleteQuestion(arg0, arg1, arg2 string) (entities.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQuestion", arg0, arg1, arg2)
	ret0, _ := ret[0].(entities.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteQuestion indicates an expected call of DeleteQuestion.
func (mr *MockRoomServiceMockRecorder) DeleteQuestion(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQuestion", reflect.TypeOf((*MockRoomService)(nil).DeleteQuestion), arg0, arg1, arg2)
}

// DeslikeQuestion mocks base method.
func (m *MockRoomService) DeslikeQuestion(arg0, arg1, arg2 string) (entities.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeslikeQuestion", arg0, arg1, arg2)
	ret0, _ := ret[0].(entities.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeslikeQuestion indicates an expected call of DeslikeQuestion.
func (mr *MockRoomServiceMockRecorder) DeslikeQuestion(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeslikeQuestion", reflect.TypeOf((*MockRoomService)(nil).DeslikeQuestion), arg0, arg1, arg2)
}

// EndRoom mocks base method.
func (m *MockRoomService) EndRoom(arg0, arg1 string) (entities.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndRoom", arg0, arg1)
	ret0, _ := ret[0].(entities.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EndRoom indicates an expected call of EndRoom.
func (mr *MockRoomServiceMockRecorder) EndRoom(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndRoom", reflect.TypeOf((*MockRoomService)(nil).EndRoom), arg0, arg1)
}

// FindByID mocks base method.
func (m *MockRoomService) FindByID(arg0 string) (entities.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0)
	ret0, _ := ret[0].(entities.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockRoomServiceMockRecorder) FindByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockRoomService)(nil).FindByID), arg0)
}

// LikeQuestion mocks base method.
func (m *MockRoomService) LikeQuestion(arg0, arg1 string, arg2 entities.Like) (entities.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LikeQuestion", arg0, arg1, arg2)
	ret0, _ := ret[0].(entities.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LikeQuestion indicates an expected call of LikeQuestion.
func (mr *MockRoomServiceMockRecorder) LikeQuestion(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikeQuestion", reflect.TypeOf((*MockRoomService)(nil).LikeQuestion), arg0, arg1, arg2)
}

// UpdateQuestion mocks base method.
func (m *MockRoomService) UpdateQuestion(arg0, arg1, arg2 string, arg3 dtos.UpdateQuestionDTO) (entities.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuestion", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(entities.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQuestion indicates an expected call of UpdateQuestion.
func (mr *MockRoomServiceMockRecorder) UpdateQuestion(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuestion", reflect.TypeOf((*MockRoomService)(nil).UpdateQuestion), arg0, arg1, arg2, arg3)
}
